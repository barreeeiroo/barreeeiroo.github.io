---
import { FIRST_NAME } from '../config';
import { Icon } from 'astro-icon/components';

interface Props {
  isHomePage: boolean;
}

const { isHomePage } = Astro.props;
---

<nav id="navbar" class="fixed top-0 left-0 right-0 z-50 bg-black/95 backdrop-blur-sm border-b-2 border-navy">
    <div class="max-w-6xl mx-auto px-6 py-4">
        <div class="flex items-center justify-between">
            <!-- Logo/Name -->
            <a href={isHomePage ? "#" : "/"} id="nav-logo" class="text-xl md:text-2xl font-bold text-white hover:text-primary transition-colors">
                {FIRST_NAME}<span class="text-primary">.</span>
            </a>

            <!-- Desktop Navigation -->
            <div class="hidden md:flex items-center gap-8">
                {isHomePage ? (
                    <>
                        <a href="#about" class="nav-link nav-item" data-section="about">
                            <span class="text-primary">01.</span> About
                        </a>
                        <a href="#experience" class="nav-link nav-item" data-section="experience">
                            <span class="text-primary">02.</span> Experience
                        </a>
                        <a href="#projects" class="nav-link nav-item" data-section="projects">
                            <span class="text-primary">03.</span> Projects
                        </a>
                        <a href="#contact" class="nav-link nav-item" data-section="contact">
                            <span class="text-primary">04.</span> Contact
                        </a>
                    </>
                ) : (
                    <a href="/" class="nav-link nav-item">
                        <span class="text-primary">00.</span> Home
                    </a>
                )}
            </div>

            <!-- Mobile Menu Button -->
            {isHomePage && (
                <button
                    id="mobile-menu-button"
                    class="md:hidden text-white p-2 hover:text-primary transition-colors"
                    aria-label="Toggle navigation menu"
                    aria-expanded="false"
                    aria-controls="mobile-menu"
                >
                    <Icon id="menu-icon" name="carbon:menu" class="w-6 h-6" />
                    <Icon id="close-icon" name="carbon:close" class="w-6 h-6 hidden" />
                </button>
            )}
            {!isHomePage && (
                <a href="/" class="md:hidden text-gray-light hover:text-primary transition-colors text-sm uppercase tracking-wider font-bold">
                    <span class="text-primary">00.</span> Home
                </a>
            )}
        </div>

        <!-- Mobile Navigation -->
        {isHomePage && (
            <nav id="mobile-menu" class="mobile-menu md:hidden" aria-hidden="true">
                <div class="mobile-menu-content flex flex-col gap-4">
                    <a href="#about" class="mobile-nav-link" data-section="about">
                        <span class="text-primary">01.</span> About
                    </a>
                    <a href="#experience" class="mobile-nav-link" data-section="experience">
                        <span class="text-primary">02.</span> Experience
                    </a>
                    <a href="#projects" class="mobile-nav-link" data-section="projects">
                        <span class="text-primary">03.</span> Projects
                    </a>
                    <a href="#contact" class="mobile-nav-link" data-section="contact">
                        <span class="text-primary">04.</span> Contact
                    </a>
                </div>
            </nav>
        )}
    </div>
</nav>

<style>
    .nav-link {
        font-size: 0.875rem;
        font-weight: 600;
        letter-spacing: 0.05em;
        text-transform: uppercase;
        color: var(--color-gray-light);
        transition: color 0.2s ease;
        position: relative;
    }

    .nav-link:hover {
        color: var(--color-primary);
    }

    .nav-link::after {
        content: '';
        position: absolute;
        bottom: -4px;
        left: 0;
        width: 0;
        height: 2px;
        background-color: var(--color-primary);
        transition: width 0.3s ease;
    }

    .nav-link:hover::after {
        width: 100%;
    }

    .nav-link.active {
        color: var(--color-primary);
    }

    .nav-link.active::after {
        width: 100%;
    }

    .mobile-nav-link {
        font-size: 1rem;
        font-weight: 600;
        letter-spacing: 0.05em;
        text-transform: uppercase;
        color: var(--color-gray-light);
        padding: 0.75rem 0;
        border-left: 2px solid transparent;
        padding-left: 1rem;
        transition: all 0.2s ease;
    }

    .mobile-nav-link:hover {
        color: var(--color-primary);
        border-left-color: var(--color-primary);
        padding-left: 1.5rem;
    }

    .mobile-nav-link.active {
        color: var(--color-primary);
        border-left-color: var(--color-primary);
        border-left-width: 4px;
    }

    /* Mobile menu animations */
    .mobile-menu {
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .mobile-menu.open {
        max-height: 400px;
    }

    .mobile-menu-content {
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 2px solid var(--color-navy);
        opacity: 0;
        transition: opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .mobile-menu.open .mobile-menu-content {
        opacity: 1;
    }

    /* Stagger animation for menu items */
    .mobile-menu.open .mobile-nav-link {
        animation: slideInLeft 0.3s ease-out forwards;
        opacity: 0;
    }

    .mobile-menu.open .mobile-nav-link:nth-child(1) {
        animation-delay: 0.05s;
    }

    .mobile-menu.open .mobile-nav-link:nth-child(2) {
        animation-delay: 0.1s;
    }

    .mobile-menu.open .mobile-nav-link:nth-child(3) {
        animation-delay: 0.15s;
    }

    .mobile-menu.open .mobile-nav-link:nth-child(4) {
        animation-delay: 0.2s;
    }

    @keyframes slideInLeft {
        from {
            opacity: 0;
            transform: translateX(-20px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
</style>

<script>
    import { accessibleAnimate, getAnimationDelay } from '../utils/motion';

    // Navbar animations
    accessibleAnimate(
        '#navbar',
        { opacity: [0, 1], y: [-40, 0] },
        { duration: 0.6, easing: 'ease-out' }
    );

    // Navbar logo
    accessibleAnimate(
        '#nav-logo',
        { opacity: [0, 1], y: [-10, 0] },
        { duration: 0.4, delay: getAnimationDelay(0.15), easing: 'ease-out' }
    );

    // Navbar items with stagger
    const navItems = document.querySelectorAll('.nav-item');
    navItems.forEach((item, index) => {
        accessibleAnimate(
            item,
            { opacity: [0, 1], y: [-10, 0] },
            { duration: 0.4, delay: getAnimationDelay(0.2 + (index * 0.1)), easing: 'ease-out' }
        );
    });

    // Mobile menu toggle
    const menuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuIcon = document.getElementById('menu-icon');
    const closeIcon = document.getElementById('close-icon');

    if (menuButton && mobileMenu && menuIcon && closeIcon) {
        // Store the first focusable element in the menu
        const firstMenuLink = mobileMenu.querySelector('.mobile-nav-link') as HTMLElement;

        // Function to toggle menu with animations
        const toggleMenu = (shouldOpen: boolean) => {
            if (shouldOpen) {
                // Opening: animate menu icon out, then close icon in
                mobileMenu.classList.add('open');
                menuButton.setAttribute('aria-expanded', 'true');
                mobileMenu.setAttribute('aria-hidden', 'false');

                accessibleAnimate(
                    menuIcon,
                    { opacity: [1, 0], rotate: [0, 90], scale: [1, 0.8] },
                    { duration: 0.2, easing: 'ease-in' }
                ).finished.then(() => {
                    menuIcon.classList.add('hidden');
                    closeIcon.classList.remove('hidden');

                    accessibleAnimate(
                        closeIcon,
                        { opacity: [0, 1], rotate: [-90, 0], scale: [0.8, 1] },
                        { duration: 0.2, easing: 'ease-out' }
                    );

                    // Focus first menu item after opening
                    if (firstMenuLink) {
                        firstMenuLink.focus();
                    }
                });
            } else {
                // Closing: animate close icon out, then menu icon in
                mobileMenu.classList.remove('open');
                menuButton.setAttribute('aria-expanded', 'false');
                mobileMenu.setAttribute('aria-hidden', 'true');

                accessibleAnimate(
                    closeIcon,
                    { opacity: [1, 0], rotate: [0, 90], scale: [1, 0.8] },
                    { duration: 0.2, easing: 'ease-in' }
                ).finished.then(() => {
                    closeIcon.classList.add('hidden');
                    menuIcon.classList.remove('hidden');

                    accessibleAnimate(
                        menuIcon,
                        { opacity: [0, 1], rotate: [-90, 0], scale: [0.8, 1] },
                        { duration: 0.2, easing: 'ease-out' }
                    );
                });

                // Return focus to menu button
                menuButton.focus();
            }
        };

        menuButton.addEventListener('click', () => {
            const isOpen = mobileMenu.classList.contains('open');
            toggleMenu(!isOpen);
        });

        // Close mobile menu when clicking on a link
        const mobileLinks = mobileMenu.querySelectorAll('a');
        mobileLinks.forEach(link => {
            link.addEventListener('click', () => {
                toggleMenu(false);
            });
        });

        // Close menu with Escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && mobileMenu.classList.contains('open')) {
                toggleMenu(false);
            }
        });

        // Trap focus within mobile menu when open
        mobileMenu.addEventListener('keydown', (e) => {
            if (!mobileMenu.classList.contains('open')) return;

            const focusableElements = mobileMenu.querySelectorAll('a[href]');
            const firstElement = focusableElements[0] as HTMLElement;
            const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;

            // Tab key navigation
            if (e.key === 'Tab') {
                if (e.shiftKey) {
                    // Shift+Tab: moving backwards
                    if (document.activeElement === firstElement) {
                        e.preventDefault();
                        menuButton.focus();
                    }
                } else {
                    // Tab: moving forwards
                    if (document.activeElement === lastElement) {
                        e.preventDefault();
                        menuButton.focus();
                    }
                }
            }
        });

        // Also handle Tab from button when menu is open
        menuButton.addEventListener('keydown', (e) => {
            if (!mobileMenu.classList.contains('open')) return;

            const focusableElements = mobileMenu.querySelectorAll('a[href]');
            const firstElement = focusableElements[0] as HTMLElement;
            const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;

            if (e.key === 'Tab') {
                if (e.shiftKey) {
                    // Shift+Tab from button: go to last menu item
                    e.preventDefault();
                    lastElement.focus();
                } else {
                    // Tab from button: go to first menu item
                    e.preventDefault();
                    firstElement.focus();
                }
            }
        });
    }
</script>
