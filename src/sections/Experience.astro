---
import { getCollection } from 'astro:content';
import ExperienceEntry from '../components/ExperienceEntry.astro';

// Fetch work experience and sort by order
const workEntries = await getCollection('work');
const sortedWork = workEntries.sort((a, b) => a.data.order - b.data.order);
---

<div class="flex flex-col md:flex-row gap-8 md:gap-12 lg:gap-16 xl:gap-24">
  <!-- Company Tabs (Vertical) -->
  <div
    role="tablist"
    aria-label="Work experience"
    class="flex md:flex-col gap-0 overflow-x-auto md:overflow-visible border-b-2 md:border-b-0 md:border-l-2 md:h-full border-primary/30"
  >
    {sortedWork.map((work, index) => (
      <button
        role="tab"
        aria-selected={index === 0 ? 'true' : 'false'}
        aria-controls={`tabpanel-${index}`}
        id={`tab-${index}`}
        tabindex={index === 0 ? 0 : -1}
        class="work-tab px-4 md:px-6 py-3 md:py-4 text-left text-xs md:text-sm uppercase tracking-wider whitespace-nowrap transition-all border-b-2 md:border-b-0 md:border-l-2 border-transparent hover:bg-primary/5 hover:text-primary cursor-pointer"
        data-index={index}
        data-company={work.data.company}
      >
        {work.data.company}
      </button>
    ))}
  </div>

  <!-- Content -->
  <div class="flex-1">
    {sortedWork.map((work, index) => (
      <div
        role="tabpanel"
        id={`tabpanel-${index}`}
        aria-labelledby={`tab-${index}`}
        tabindex="0"
        class="work-content hidden"
        data-index={index}
      >
        <ExperienceEntry work={work} index={index} />
      </div>
    ))}
  </div>
</div>

<style>
  /* Active tab styling */
  .work-tab.active {
    border-color: var(--color-primary);
    color: var(--color-primary);
    background-color: rgba(252, 163, 17, 0.05);
  }
</style>

<script>
  import { accessibleAnimate } from '../utils/motion';

  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', () => {
    // Work experience tabs
    const tabs = document.querySelectorAll('[role="tab"]') as NodeListOf<HTMLButtonElement>;
    const tabPanels = document.querySelectorAll('[role="tabpanel"]') as NodeListOf<HTMLElement>;

    function showWorkContent(index: number, shouldFocus: boolean = false) {
      // Hide all content
      tabPanels.forEach(panel => {
        panel.classList.add('hidden');
      });

      // Update ARIA states for all tabs
      tabs.forEach((tab, i) => {
        const isSelected = i === index;
        tab.setAttribute('aria-selected', isSelected.toString());
        tab.setAttribute('tabindex', isSelected ? '0' : '-1');
        tab.classList.toggle('active', isSelected);
      });

      // Show selected content
      const selectedPanel = tabPanels[index];
      if (selectedPanel) {
        selectedPanel.classList.remove('hidden');
        accessibleAnimate(
          selectedPanel,
          { opacity: [0, 1], x: [-20, 0] },
          { duration: 0.3, easing: 'ease-out' }
        );
      }

      // Focus the selected tab if requested
      if (shouldFocus && tabs[index]) {
        tabs[index].focus();
      }
    }

    // Add click listeners to tabs
    tabs.forEach((tab, index) => {
      tab.addEventListener('click', () => {
        showWorkContent(index);
      });

      // Keyboard navigation
      tab.addEventListener('keydown', (e) => {
        let newIndex = index;
        let shouldHandle = false;

        switch (e.key) {
          case 'ArrowRight':
          case 'ArrowDown':
            // Move to next tab
            newIndex = (index + 1) % tabs.length;
            shouldHandle = true;
            break;
          case 'ArrowLeft':
          case 'ArrowUp':
            // Move to previous tab
            newIndex = (index - 1 + tabs.length) % tabs.length;
            shouldHandle = true;
            break;
          case 'Home':
            // Move to first tab
            newIndex = 0;
            shouldHandle = true;
            break;
          case 'End':
            // Move to last tab
            newIndex = tabs.length - 1;
            shouldHandle = true;
            break;
        }

        if (shouldHandle) {
          e.preventDefault();
          showWorkContent(newIndex, true);
        }
      });
    });

    // Show first tab by default
    if (tabs.length > 0) {
      showWorkContent(0);
    }
  });
</script>
